--------------------------------------------------------
--  File created - œroda-wrzeœnia-18-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Type ODCINUMBERLIST
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "HR"."ODCINUMBERLIST" AS TABLE OF NUMBER;

/
--------------------------------------------------------
--  DDL for Type ODCIVARCHAR2LIST
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "HR"."ODCIVARCHAR2LIST" AS TABLE OF VARCHAR2(4000);

/
--------------------------------------------------------
--  DDL for Sequence BRANZE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."BRANZE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 12 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KATEGORIE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."KATEGORIE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence LISTA_PRODUKTOW_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."LISTA_PRODUKTOW_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence LISTA_ZAKUPOW_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."LISTA_ZAKUPOW_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRODUCENCI_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."PRODUCENCI_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRODUKTY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."PRODUKTY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SKLEPY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."SKLEPY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence UZYTKOWNICY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."UZYTKOWNICY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 16 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table BRANZE
--------------------------------------------------------

  CREATE TABLE "HR"."BRANZE" 
   (	"ID_BRANZY" NUMBER, 
	"NAZWA" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table KATEGORIE
--------------------------------------------------------

  CREATE TABLE "HR"."KATEGORIE" 
   (	"ID_KATEGORII" NUMBER, 
	"NAZWA" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LISTA_PRODUKTOW
--------------------------------------------------------

  CREATE TABLE "HR"."LISTA_PRODUKTOW" 
   (	"ID_LISTY_PRODUKTOW" NUMBER, 
	"ID_LISTY" NUMBER, 
	"ID_PRODUKTU" NUMBER, 
	"ILOSC_PRODUKTU" NUMBER
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LISTA_ZAKUPOW
--------------------------------------------------------

  CREATE TABLE "HR"."LISTA_ZAKUPOW" 
   (	"ID_LISTY" NUMBER, 
	"ID_UZYTKOWNIKA" NUMBER, 
	"DATA_UTWORZENIA" DATE, 
	"NAZWA" VARCHAR2(30 BYTE) COLLATE "USING_NLS_COMP", 
	"STATUS" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRODUCENCI
--------------------------------------------------------

  CREATE TABLE "HR"."PRODUCENCI" 
   (	"ID_PRODUCENTA" NUMBER, 
	"ID_BRANZY" NUMBER, 
	"NAZWA" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"ADRES" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"NR_TELEFONU" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRODUKTY
--------------------------------------------------------

  CREATE TABLE "HR"."PRODUKTY" 
   (	"ID_PRODUKTU" NUMBER, 
	"ID_KATEGORII" NUMBER, 
	"ID_PRODUCENTA" NUMBER, 
	"NAZWA" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"CENA" FLOAT(126)
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRODUKTY_SKLEPY
--------------------------------------------------------

  CREATE TABLE "HR"."PRODUKTY_SKLEPY" 
   (	"ID_SKLEPU" NUMBER, 
	"ID_PRODUKTU" NUMBER, 
	"ILOSC" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SKLEPY
--------------------------------------------------------

  CREATE TABLE "HR"."SKLEPY" 
   (	"ID_SKLEPU" NUMBER, 
	"NAZWA_SKLEPU" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"ADRES" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table UZYTKOWNICY
--------------------------------------------------------

  CREATE TABLE "HR"."UZYTKOWNICY" 
   (	"ID_UZYTKOWNIKA" NUMBER, 
	"IMIE" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"NAZWISKO" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"NR_TELEFONU" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"ADRES_EMAIL" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"LOGIN" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"HASLO" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP", 
	"PIENIADZE" FLOAT(126), 
	"ROLE" VARCHAR2(20 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View EMP_DETAILS_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "HR"."EMP_DETAILS_VIEW" ("EMPLOYEE_ID", "JOB_ID", "MANAGER_ID", "DEPARTMENT_ID", "LOCATION_ID", "COUNTRY_ID", "FIRST_NAME", "LAST_NAME", "SALARY", "COMMISSION_PCT", "DEPARTMENT_NAME", "JOB_TITLE", "CITY", "STATE_PROVINCE", "COUNTRY_NAME", "REGION_NAME") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  SELECT
  e.employee_id,
  e.job_id,
  e.manager_id,
  e.department_id,
  d.location_id,
  l.country_id,
  e.first_name,
  e.last_name,
  e.salary,
  e.commission_pct,
  d.department_name,
  j.job_title,
  l.city,
  l.state_province,
  c.country_name,
  r.region_name
FROM
  employees e,
  departments d,
  jobs j,
  locations l,
  countries c,
  regions r
WHERE e.department_id = d.department_id
  AND d.location_id = l.location_id
  AND l.country_id = c.country_id
  AND c.region_id = r.region_id
  AND j.job_id = e.job_id
WITH READ ONLY
;
--------------------------------------------------------
--  DDL for View MAX_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "HR"."MAX_VIEW" ("MY_COUNT", "ID_PRODUKTU") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  SELECT COUNT(id_produktu) my_count, id_produktu FROM LISTA_PRODUKTOW WHERE id_listy=1 GROUP BY id_produktu
;
REM INSERTING into HR.BRANZE
SET DEFINE OFF;
Insert into HR.BRANZE (ID_BRANZY,NAZWA) values ('7','Zwierzeta');
Insert into HR.BRANZE (ID_BRANZY,NAZWA) values ('1','Sport');
Insert into HR.BRANZE (ID_BRANZY,NAZWA) values ('2','Moda');
Insert into HR.BRANZE (ID_BRANZY,NAZWA) values ('3','Motoryzacja');
Insert into HR.BRANZE (ID_BRANZY,NAZWA) values ('4','Wystrï¿½j domu ');
Insert into HR.BRANZE (ID_BRANZY,NAZWA) values ('5','Zdrowie');
Insert into HR.BRANZE (ID_BRANZY,NAZWA) values ('6','Losie');
REM INSERTING into HR.KATEGORIE
SET DEFINE OFF;
Insert into HR.KATEGORIE (ID_KATEGORII,NAZWA) values ('7','Losie');
Insert into HR.KATEGORIE (ID_KATEGORII,NAZWA) values ('1','Sport');
Insert into HR.KATEGORIE (ID_KATEGORII,NAZWA) values ('2','Moda');
Insert into HR.KATEGORIE (ID_KATEGORII,NAZWA) values ('3','Motoryzacja');
Insert into HR.KATEGORIE (ID_KATEGORII,NAZWA) values ('4','Wystrï¿½j domu ');
Insert into HR.KATEGORIE (ID_KATEGORII,NAZWA) values ('5','Zdrowie');
Insert into HR.KATEGORIE (ID_KATEGORII,NAZWA) values ('6','Zwierzï¿½ta');
REM INSERTING into HR.LISTA_PRODUKTOW
SET DEFINE OFF;
Insert into HR.LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW,ID_LISTY,ID_PRODUKTU,ILOSC_PRODUKTU) values ('42','42','100','1');
Insert into HR.LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW,ID_LISTY,ID_PRODUKTU,ILOSC_PRODUKTU) values ('43','42','103','4');
Insert into HR.LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW,ID_LISTY,ID_PRODUKTU,ILOSC_PRODUKTU) values ('92','90','121','3');
Insert into HR.LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW,ID_LISTY,ID_PRODUKTU,ILOSC_PRODUKTU) values ('93','90','106','1');
Insert into HR.LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW,ID_LISTY,ID_PRODUKTU,ILOSC_PRODUKTU) values ('41','41','98','20');
Insert into HR.LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW,ID_LISTY,ID_PRODUKTU,ILOSC_PRODUKTU) values ('44','43','98','10');
Insert into HR.LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW,ID_LISTY,ID_PRODUKTU,ILOSC_PRODUKTU) values ('1','1','93','5');
Insert into HR.LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW,ID_LISTY,ID_PRODUKTU,ILOSC_PRODUKTU) values ('25','32','94','4');
Insert into HR.LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW,ID_LISTY,ID_PRODUKTU,ILOSC_PRODUKTU) values ('26','32','92','3');
Insert into HR.LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW,ID_LISTY,ID_PRODUKTU,ILOSC_PRODUKTU) values ('81','81','98','3');
REM INSERTING into HR.LISTA_ZAKUPOW
SET DEFINE OFF;
Insert into HR.LISTA_ZAKUPOW (ID_LISTY,ID_UZYTKOWNIKA,DATA_UTWORZENIA,NAZWA,STATUS) values ('42','6',to_date('24/06/25','RR/MM/DD'),'Klocki i czapka','Zrealizowane');
Insert into HR.LISTA_ZAKUPOW (ID_LISTY,ID_UZYTKOWNIKA,DATA_UTWORZENIA,NAZWA,STATUS) values ('90','1',to_date('24/09/18','RR/MM/DD'),'Dywanik i 3 pasty','Niezrealizowane');
Insert into HR.LISTA_ZAKUPOW (ID_LISTY,ID_UZYTKOWNIKA,DATA_UTWORZENIA,NAZWA,STATUS) values ('41','6',to_date('24/06/25','RR/MM/DD'),'podajNazweListyTextField','Niezrealizowane');
Insert into HR.LISTA_ZAKUPOW (ID_LISTY,ID_UZYTKOWNIKA,DATA_UTWORZENIA,NAZWA,STATUS) values ('43','6',to_date('24/06/25','RR/MM/DD'),'Nazwa listy','Zrealizowane');
Insert into HR.LISTA_ZAKUPOW (ID_LISTY,ID_UZYTKOWNIKA,DATA_UTWORZENIA,NAZWA,STATUS) values ('1','1',to_date('24/06/18','RR/MM/DD'),'Lista edytowana','Niezrealizowane');
Insert into HR.LISTA_ZAKUPOW (ID_LISTY,ID_UZYTKOWNIKA,DATA_UTWORZENIA,NAZWA,STATUS) values ('32','1',to_date('24/06/25','RR/MM/DD'),'Lista zakupów','niezrealizowane');
Insert into HR.LISTA_ZAKUPOW (ID_LISTY,ID_UZYTKOWNIKA,DATA_UTWORZENIA,NAZWA,STATUS) values ('81','1',to_date('24/09/18','RR/MM/DD'),'czwarta lista','Niezrealizowane');
REM INSERTING into HR.PRODUCENCI
SET DEFINE OFF;
Insert into HR.PRODUCENCI (ID_PRODUCENTA,ID_BRANZY,NAZWA,ADRES,NR_TELEFONU) values ('63','3','UNION PARTS','Wroclaw','123123123');
Insert into HR.PRODUCENCI (ID_PRODUCENTA,ID_BRANZY,NAZWA,ADRES,NR_TELEFONU) values ('64','4','IKEA','Krakï¿½w','321312312');
Insert into HR.PRODUCENCI (ID_PRODUCENTA,ID_BRANZY,NAZWA,ADRES,NR_TELEFONU) values ('65','4','MARMEB','Gdansk','32131213');
Insert into HR.PRODUCENCI (ID_PRODUCENTA,ID_BRANZY,NAZWA,ADRES,NR_TELEFONU) values ('1','1','POLMAX','Dï¿½bica','123456789');
Insert into HR.PRODUCENCI (ID_PRODUCENTA,ID_BRANZY,NAZWA,ADRES,NR_TELEFONU) values ('2','1','MAXPOL','Krakï¿½w','123454339');
Insert into HR.PRODUCENCI (ID_PRODUCENTA,ID_BRANZY,NAZWA,ADRES,NR_TELEFONU) values ('3','2','MOON','Warszawa','324567896');
Insert into HR.PRODUCENCI (ID_PRODUCENTA,ID_BRANZY,NAZWA,ADRES,NR_TELEFONU) values ('4','2','3STU','Krosno','443433232');
Insert into HR.PRODUCENCI (ID_PRODUCENTA,ID_BRANZY,NAZWA,ADRES,NR_TELEFONU) values ('62','3','SZiK','Tarnow','123123123');
Insert into HR.PRODUCENCI (ID_PRODUCENTA,ID_BRANZY,NAZWA,ADRES,NR_TELEFONU) values ('8','5','KrosGlass','Krosno','421124124');
REM INSERTING into HR.PRODUKTY
SET DEFINE OFF;
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('94','2','3','Spodnie','30');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('92','1','1','Mleko','2');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('93','1','2','Jajko','1');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('123','5','3','Recznik papierowy','8');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('124','5','4','Mozdrerz','12');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('121','5','3','Pasta do zebow','6');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('122','5','3','Mydlo','5');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('131','1','1','Pomidor','2');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('132','1','2','Chipsy Lays','3');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('128','1','1','Papryka','3');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('129','1','1','Papryka','3');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('96','1','1','Ser','4');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('97','1','1','Ser bialy','4');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('98','1','2','Woda mineralna','2');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('99','1','1','Jogurt','3');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('100','2','3','Czapka','25');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('101','2','3','Skarpetki','20');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('102','1','62','Sweter Sportowy','49');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('103','3','62','Klocki hamulcowe','250');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('104','3','62','Wycieraczka przednia','200');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('105','3','62','Wycieraczka tylnia','200');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('106','3','62','Dywaniki uniwersalne','150');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('107','6','2','Karma','30');
Insert into HR.PRODUKTY (ID_PRODUKTU,ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) values ('2','3','2','Krzeslo obrotowe bum','56,001');
REM INSERTING into HR.PRODUKTY_SKLEPY
SET DEFINE OFF;
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('5','95','9');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('2','92','7');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('5','93','98');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('3','123','10');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('5','124','3');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('5','125','3');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('3','121','25');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('2','128','50');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('2','129','50');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('2','130','50');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('2','131','50');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('4','132','10');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('7','96','50');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('7','97','50');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('1','98','20');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('6','99','30');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('2','100','5');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('5','101','10');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('5','102','15');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('2','103','19');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('7','104','5');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('7','105','5');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('3','106','10');
Insert into HR.PRODUKTY_SKLEPY (ID_SKLEPU,ID_PRODUKTU,ILOSC) values ('3','107','10');
REM INSERTING into HR.SKLEPY
SET DEFINE OFF;
Insert into HR.SKLEPY (ID_SKLEPU,NAZWA_SKLEPU,ADRES) values ('1','Biedronka','Jedlicze');
Insert into HR.SKLEPY (ID_SKLEPU,NAZWA_SKLEPU,ADRES) values ('2','AfroMin','Rzeszï¿½w1');
Insert into HR.SKLEPY (ID_SKLEPU,NAZWA_SKLEPU,ADRES) values ('3','Tesco','Leszno');
Insert into HR.SKLEPY (ID_SKLEPU,NAZWA_SKLEPU,ADRES) values ('5','Kaufland','Rzeszï¿½w');
Insert into HR.SKLEPY (ID_SKLEPU,NAZWA_SKLEPU,ADRES) values ('6','Groszek','Rzeszï¿½w6');
Insert into HR.SKLEPY (ID_SKLEPU,NAZWA_SKLEPU,ADRES) values ('7','KauflanDzik','Korsno');
REM INSERTING into HR.UZYTKOWNICY
SET DEFINE OFF;
Insert into HR.UZYTKOWNICY (ID_UZYTKOWNIKA,IMIE,NAZWISKO,NR_TELEFONU,ADRES_EMAIL,LOGIN,HASLO,PIENIADZE,ROLE) values ('10','imie','nazwisko','123456789','email@wp.pl','login','haslo1','0','user');
Insert into HR.UZYTKOWNICY (ID_UZYTKOWNIKA,IMIE,NAZWISKO,NR_TELEFONU,ADRES_EMAIL,LOGIN,HASLO,PIENIADZE,ROLE) values ('6','Lukasz','Garbacik','531462311','lukoaszek@gmail.com','lukasz','lukasz','30','admin');
Insert into HR.UZYTKOWNICY (ID_UZYTKOWNIKA,IMIE,NAZWISKO,NR_TELEFONU,ADRES_EMAIL,LOGIN,HASLO,PIENIADZE,ROLE) values ('1','Lukasz','Nowak','12354323','l','admin','h','868','user');
Insert into HR.UZYTKOWNICY (ID_UZYTKOWNIKA,IMIE,NAZWISKO,NR_TELEFONU,ADRES_EMAIL,LOGIN,HASLO,PIENIADZE,ROLE) values ('5','FFWE','WEF','123321123','appUpdate@ap.pp','WEFWEF','updatedapp','100','admin');
Insert into HR.UZYTKOWNICY (ID_UZYTKOWNIKA,IMIE,NAZWISKO,NR_TELEFONU,ADRES_EMAIL,LOGIN,HASLO,PIENIADZE,ROLE) values ('7','UPDATE','UPDATE','900000','UPDATE','UPDATE','UPDATE','12312','user');
REM INSERTING into HR.EMP_DETAILS_VIEW
SET DEFINE OFF;
REM INSERTING into HR.MAX_VIEW
SET DEFINE OFF;
Insert into HR.MAX_VIEW (MY_COUNT,ID_PRODUKTU) values ('1','93');
--------------------------------------------------------
--  DDL for Index PK_BRANZE
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_BRANZE" ON "HR"."BRANZE" ("ID_BRANZY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_KATEGORIE
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_KATEGORIE" ON "HR"."KATEGORIE" ("ID_KATEGORII") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_LISTA_PRODUKTOW
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_LISTA_PRODUKTOW" ON "HR"."LISTA_PRODUKTOW" ("ID_LISTY_PRODUKTOW") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_LISTA_ZAKUPOW
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_LISTA_ZAKUPOW" ON "HR"."LISTA_ZAKUPOW" ("ID_LISTY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PRODUCENCI
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_PRODUCENCI" ON "HR"."PRODUCENCI" ("ID_PRODUCENTA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PRODUKTY
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_PRODUKTY" ON "HR"."PRODUKTY" ("ID_PRODUKTU") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PRODUKTY_SKLEPY
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_PRODUKTY_SKLEPY" ON "HR"."SKLEPY" ("ID_SKLEPU") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_UZYTKOWNICY
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_UZYTKOWNICY" ON "HR"."UZYTKOWNICY" ("ID_UZYTKOWNIKA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UNQ_EMAIL
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."UNQ_EMAIL" ON "HR"."UZYTKOWNICY" ("ADRES_EMAIL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UNQ_LOGIN
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."UNQ_LOGIN" ON "HR"."UZYTKOWNICY" ("LOGIN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_BRANZE
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_BRANZE" ON "HR"."BRANZE" ("ID_BRANZY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_KATEGORIE
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_KATEGORIE" ON "HR"."KATEGORIE" ("ID_KATEGORII") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_LISTA_PRODUKTOW
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_LISTA_PRODUKTOW" ON "HR"."LISTA_PRODUKTOW" ("ID_LISTY_PRODUKTOW") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_LISTA_ZAKUPOW
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_LISTA_ZAKUPOW" ON "HR"."LISTA_ZAKUPOW" ("ID_LISTY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PRODUCENCI
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_PRODUCENCI" ON "HR"."PRODUCENCI" ("ID_PRODUCENTA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PRODUKTY
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_PRODUKTY" ON "HR"."PRODUKTY" ("ID_PRODUKTU") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PRODUKTY_SKLEPY
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_PRODUKTY_SKLEPY" ON "HR"."SKLEPY" ("ID_SKLEPU") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_UZYTKOWNICY
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK_UZYTKOWNICY" ON "HR"."UZYTKOWNICY" ("ID_UZYTKOWNIKA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UNQ_LOGIN
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."UNQ_LOGIN" ON "HR"."UZYTKOWNICY" ("LOGIN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UNQ_EMAIL
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."UNQ_EMAIL" ON "HR"."UZYTKOWNICY" ("ADRES_EMAIL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger TRG_PRODUKTY_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "HR"."TRG_PRODUKTY_ID" 
BEFORE INSERT ON PRODUKTY
FOR EACH ROW
BEGIN
  SELECT produkty_seq.NEXTVAL INTO :NEW.ID_PRODUKTU FROM dual;
END;

/
ALTER TRIGGER "HR"."TRG_PRODUKTY_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UZYTKOWNICY_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "HR"."TRG_UZYTKOWNICY_ID" 
BEFORE INSERT ON UZYTKOWNICY
FOR EACH ROW
BEGIN
  SELECT uzytkownicy_seq.NEXTVAL INTO :NEW.ID_UZYTKOWNIKA FROM dual;
END;

/
ALTER TRIGGER "HR"."TRG_UZYTKOWNICY_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_PRODUKTY_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "HR"."TRG_PRODUKTY_ID" 
BEFORE INSERT ON PRODUKTY
FOR EACH ROW
BEGIN
  SELECT produkty_seq.NEXTVAL INTO :NEW.ID_PRODUKTU FROM dual;
END;

/
ALTER TRIGGER "HR"."TRG_PRODUKTY_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UZYTKOWNICY_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "HR"."TRG_UZYTKOWNICY_ID" 
BEFORE INSERT ON UZYTKOWNICY
FOR EACH ROW
BEGIN
  SELECT uzytkownicy_seq.NEXTVAL INTO :NEW.ID_UZYTKOWNIKA FROM dual;
END;

/
ALTER TRIGGER "HR"."TRG_UZYTKOWNICY_ID" ENABLE;
--------------------------------------------------------
--  DDL for Procedure CHANGESTATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."CHANGESTATUS" (p_id_listy IN NUMBER) AS
BEGIN
    UPDATE lista_zakupow 
    SET status = 'Zrealizowane' 
    WHERE ID_LISTY = p_id_listy;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEBRANZE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."DELETEBRANZE" (idBranzy IN NUMBER) AS
BEGIN
    DELETE FROM BRANZE WHERE ID_BRANZY = idBranzy;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEKATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."DELETEKATEGORIA" (idKategorii IN NUMBER) AS
BEGIN
    DELETE FROM KATEGORIE WHERE ID_KATEGORII = idKategorii;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETELISTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."DELETELISTA" (idListy IN NUMBER) AS
BEGIN
    -- Delete from LISTA_PRODUKTOW first to avoid foreign key constraint violation
    DELETE FROM LISTA_PRODUKTOW WHERE ID_LISTY = idListy;

    -- Then delete from LISTA_ZAKUPOW
    DELETE FROM LISTA_ZAKUPOW WHERE ID_LISTY = idListy;
    
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETELISTAZAKUPOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."DELETELISTAZAKUPOW" (idZakupu IN NUMBER) AS
BEGIN
    -- Najpierw usuñ produkty z listy zakupów
    DELETE FROM LISTA_PRODUKTOW WHERE ID_LISTY = idZakupu;

    -- Nastêpnie usuñ listê zakupów
    DELETE FROM LISTA_ZAKUPOW WHERE ID_LISTY = idZakupu;
    
    COMMIT; -- Zatwierdzenie zmian, jeœli to potrzebne
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEPRODUCENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."DELETEPRODUCENT" (idProducenta IN NUMBER) AS
BEGIN
    DELETE FROM PRODUCENCI WHERE ID_PRODUCENTA = idProducenta;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEPRODUKT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."DELETEPRODUKT" (idProduktu IN NUMBER) AS
BEGIN
    DELETE FROM PRODUKTY WHERE ID_PRODUKTU = idProduktu;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEPRODUKTSKLEP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."DELETEPRODUKTSKLEP" (idProduktu IN NUMBER, idSklepu IN NUMBER) AS
BEGIN
    DELETE FROM PRODUKTY_SKLEPY WHERE ID_PRODUKTU = idProduktu AND ID_SKLEPU = idSklepu;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETESKLEP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."DELETESKLEP" (idSklepu IN NUMBER) AS
BEGIN
    DELETE FROM SKLEPY WHERE ID_SKLEPU = idSklepu;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEUZYTKOWNIK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."DELETEUZYTKOWNIK" (idUzytkownika IN NUMBER) AS
BEGIN
    DELETE FROM UZYTKOWNICY WHERE ID_UZYTKOWNIKA = idUzytkownika;
END;

/
--------------------------------------------------------
--  DDL for Procedure FINDALLSKLEPBYNAME
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."FINDALLSKLEPBYNAME" (nazwaSklepu IN VARCHAR2, sklepy_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN sklepy_cursor FOR 
    SELECT id_sklepu 
    FROM sklepy 
    WHERE nazwa_sklepu = nazwaSklepu;
END;

/
--------------------------------------------------------
--  DDL for Procedure GIVEPERMISSION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."GIVEPERMISSION" (p_login IN VARCHAR2) AS
BEGIN
    UPDATE uzytkownicy 
    SET role = 'admin' 
    WHERE login = p_login;
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTLISTAPRODUKTOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTLISTAPRODUKTOW" (
    p_ID_LISTY IN NUMBER,
    p_ID_PRODUKTU IN NUMBER,
    p_ILOSC_PRODUKTU IN NUMBER
) AS
BEGIN
    INSERT INTO LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW, ID_LISTY, ID_PRODUKTU, ILOSC_PRODUKTU) 
    VALUES (LISTA_PRODUKTOW_SEQ.nextval, p_ID_LISTY, p_ID_PRODUKTU, p_ILOSC_PRODUKTU);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWBRANZE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWBRANZE" (
    p_nazwaBranzy IN VARCHAR2
) AS
BEGIN
    INSERT INTO BRANZE (ID_BRANZY, NAZWA) 
    VALUES (BRANZE_SEQ.nextval, p_nazwaBranzy);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWKATEGORIE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWKATEGORIE" (
    nazwaKategorii IN VARCHAR2
) AS
BEGIN
    INSERT INTO KATEGORIE (ID_KATEGORII, NAZWA) 
    VALUES (KATEGORIE_SEQ.nextval, nazwaKategorii);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWLISTAPRODUKTOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWLISTAPRODUKTOW" (
    p_ID_LISTY IN NUMBER,
    p_ID_PRODUKTU IN NUMBER,
    p_ILOSC_PRODUKTU IN NUMBER
) AS
BEGIN
    INSERT INTO LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW, ID_LISTY, ID_PRODUKTU, ILOSC_PRODUKTU) 
    VALUES (LISTA_PRODUKTOW_SEQ.nextval, p_ID_LISTY, p_ID_PRODUKTU, p_ILOSC_PRODUKTU);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWLISTAZAKUPOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWLISTAZAKUPOW" (
    p_ID_UZYTKOWNIKA IN NUMBER,
    p_DATA_UTWORZENIA IN DATE,
    p_NAZWA IN VARCHAR2,
    p_STATUS IN VARCHAR2
) AS
    v_DATA_UTWORZENIA DATE;
    v_STATUS VARCHAR2(50);
BEGIN
    -- U¿ycie lokalnych zmiennych do przypisania domyœlnych wartoœci
    v_DATA_UTWORZENIA := NVL(p_DATA_UTWORZENIA, SYSDATE);
    v_STATUS := NVL(p_STATUS, 'Niezrealizowane');

    INSERT INTO LISTA_ZAKUPOW (ID_LISTY, ID_UZYTKOWNIKA, DATA_UTWORZENIA, NAZWA, STATUS) 
    VALUES (LISTA_ZAKUPOW_SEQ.nextval, p_ID_UZYTKOWNIKA, v_DATA_UTWORZENIA, p_NAZWA, v_STATUS);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWLISTAZAKUPOW_Z_PRODUKTAMI
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWLISTAZAKUPOW_Z_PRODUKTAMI" (
    p_ID_UZYTKOWNIKA IN NUMBER,
    p_NAZWA IN VARCHAR2,
    p_PRODUKTY IN HR.ODCINUMBERLIST, -- Zak³adaj¹c, ¿e ID_PRODUKTU jest liczb¹
    p_ILOSCI IN HR.ODCINUMBERLIST,
    p_DATA_UTWORZENIA IN DATE DEFAULT SYSDATE,
        p_STATUS IN VARCHAR2 DEFAULT 'Niezrealizowane'
) AS
    v_ID_LISTY NUMBER;
BEGIN
    -- Wstawienie nowej listy zakupów do tabeli LISTA_ZAKUPOW
    INSERT INTO LISTA_ZAKUPOW (ID_LISTY, ID_UZYTKOWNIKA, DATA_UTWORZENIA, NAZWA, STATUS) 
    VALUES (LISTA_ZAKUPOW_SEQ.nextval, p_ID_UZYTKOWNIKA, p_DATA_UTWORZENIA, p_NAZWA, p_STATUS)
    RETURNING ID_LISTY INTO v_ID_LISTY;

    -- Wstawienie produktów do tabeli LISTA_PRODUKTOW
    FOR i IN 1 .. p_PRODUKTY.COUNT LOOP
        INSERT INTO LISTA_PRODUKTOW (ID_LISTY_PRODUKTOW, ID_LISTY, ID_PRODUKTU, ILOSC_PRODUKTU) 
        VALUES (LISTA_PRODUKTOW_SEQ.nextval, v_ID_LISTY, p_PRODUKTY(i), p_ILOSCI(i));
    END LOOP;

END INSERTNEWLISTAZAKUPOW_Z_PRODUKTAMI;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWPRODUCENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWPRODUCENT" (
    p_id_branzy IN NUMBER,
    p_nazwa IN VARCHAR2,
    p_adres IN VARCHAR2,
    p_nr_telefonu IN VARCHAR2
) AS
BEGIN
    INSERT INTO PRODUCENCI (ID_PRODUCENTA, ID_BRANZY, NAZWA, ADRES, NR_TELEFONU)
    VALUES (producenci_seq.NEXTVAL, p_id_branzy, p_nazwa, p_adres, p_nr_telefonu);
    
    COMMIT; -- Optional: commit the transaction
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWPRODUKT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWPRODUKT" (p_id_kategorii IN NUMBER,p_id_producenta IN NUMBER,p_nazwa IN VARCHAR2,p_cena IN FLOAT) IS
BEGIN
    INSERT INTO PRODUKTY (ID_KATEGORII,ID_PRODUCENTA,NAZWA,CENA) 
    VALUES (p_id_kategorii,p_id_producenta,p_nazwa,p_cena);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWPRODUKTSKLEP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWPRODUKTSKLEP" (
    p_ID_SKLEPU IN NUMBER,
    p_ID_PRODUKTU IN NUMBER,
    p_ILOSC IN VARCHAR2
) AS
BEGIN
    INSERT INTO PRODUKTY_SKLEPY (ID_SKLEPU, ID_PRODUKTU, ILOSC) 
    VALUES (p_ID_SKLEPU, p_ID_PRODUKTU, p_ILOSC);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWPRODUKTY_SKLEPY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWPRODUKTY_SKLEPY" (
    p_ID_SKLEPU IN NUMBER,
    p_ID_PRODUKTU IN NUMBER,
    p_ILOSC IN VARCHAR2
) AS
BEGIN
    INSERT INTO PRODUKTY_SKLEPY (ID_SKLEPU, ID_PRODUKTU, ILOSC) 
    VALUES (p_ID_SKLEPU, p_ID_PRODUKTU, p_ILOSC);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWSKLEP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWSKLEP" (
    p_NAZWA_SKLEPU IN VARCHAR2,
    p_ADRES IN VARCHAR2
) AS
BEGIN
    INSERT INTO SKLEPY (ID_SKLEPU, NAZWA_SKLEPU, ADRES) 
    VALUES (SKLEPY_SEQ.nextval, p_NAZWA_SKLEPU, p_ADRES);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNEWUZYTKOWNIK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERTNEWUZYTKOWNIK" (
    p_imie IN VARCHAR2,
    p_nazwisko IN VARCHAR2,
    p_nr_telefonu IN VARCHAR2,
    p_adres_email IN VARCHAR2,
    p_login IN VARCHAR2,
    p_haslo IN VARCHAR2,
    p_pieniadze IN FLOAT DEFAULT 0, -- Default value for money
    p_role IN VARCHAR2 DEFAULT 'user' -- Default value for role
) IS
BEGIN
    INSERT INTO UZYTKOWNICY (
        IMIE,
        NAZWISKO,
        NR_TELEFONU,
        ADRES_EMAIL,
        LOGIN,
        HASLO,
        PIENIADZE,
        ROLE
    ) VALUES (
        p_imie,
        p_nazwisko,
        p_nr_telefonu,
        p_adres_email,
        p_login,
        p_haslo,
        p_pieniadze,
        p_role
    );
    EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RAISE_APPLICATION_ERROR(-20001, 'Login lub Email ju¿ istnieje.');
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_PRODUKT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."INSERT_PRODUKT" 

/
--------------------------------------------------------
--  DDL for Procedure POBIERZPRODUKTYWLISCIE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."POBIERZPRODUKTYWLISCIE" (
    p_id_listy IN NUMBER,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
        SELECT p.id_produktu, p.nazwa, p.cena, lp.ilosc_produktu
        FROM produkty p
        JOIN lista_produktow lp ON p.id_produktu = lp.id_produktu
        WHERE lp.id_listy = p_id_listy;
END;

/
--------------------------------------------------------
--  DDL for Procedure POBIERZPRODUKTYWSKLEPIE2
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."POBIERZPRODUKTYWSKLEPIE2" (
    p_id_sklepu IN NUMBER,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
        SELECT p.id_produktu, p.nazwa, p.cena
        FROM produkty p
        JOIN produkty_sklepy ps ON p.id_produktu = ps.id_produktu
        WHERE ps.id_sklepu = p_id_sklepu;
END;

/
--------------------------------------------------------
--  DDL for Procedure READBRANZE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READBRANZE" AS
CURSOR c_branze IS SELECT * FROM BRANZE;
BEGIN
    FOR branze IN c_branze LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || branze.ID_BRANZY || ' Nazwa: ' || branze.NAZWA);
    END LOOP;
END;

/
--------------------------------------------------------
--  DDL for Procedure READKATEGORIE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READKATEGORIE" (
    p_list_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_list_cursor FOR
        SELECT NAZWA
        FROM kategorie;
END READKATEGORIE;

/
--------------------------------------------------------
--  DDL for Procedure READLISTAPRODUKTOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READLISTAPRODUKTOW" (
    p_listaId IN NUMBER,
    p_shop_cursor OUT SYS_REFCURSOR
)AS
BEGIN
    OPEN p_shop_cursor FOR
        SELECT p.ID_PRODUKTU, p.NAZWA, lp.ILOSC_PRODUKTU
        FROM PRODUKTY p
        JOIN LISTA_PRODUKTOW lp ON p.ID_PRODUKTU = lp.ID_PRODUKTU
        WHERE lp.ID_LISTY = p_listaId;
END READLISTAPRODUKTOW;

/
--------------------------------------------------------
--  DDL for Procedure READLISTAZAKUPOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READLISTAZAKUPOW" AS
    CURSOR c_zakupy IS 
        SELECT ID_LISTY, NAZWA
        FROM LISTA_ZAKUPOW;
BEGIN
    FOR zakup IN c_zakupy LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || zakup.ID_LISTY || ' Nazwa: ' || zakup.NAZWA);
    END LOOP;
END;

/
--------------------------------------------------------
--  DDL for Procedure READLISTY2
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READLISTY2" (
    p_list_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_list_cursor FOR
        SELECT lz.ID_LISTY as idListy, u.LOGIN as login, lz.data_utworzenia as data, lz.nazwa as nazwa, lz.status as status 
        FROM LISTA_ZAKUPOW lz
        JOIN UZYTKOWNICY u ON u.id_uzytkownika = lz.id_uzytkownika
        ORDER BY lz.ID_LISTY;
END READLISTY2;

/
--------------------------------------------------------
--  DDL for Procedure READLISTYUZYTKOWNIKA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READLISTYUZYTKOWNIKA" (
    p_shop_cursor OUT SYS_REFCURSOR,
    p_userId IN NUMBER
) AS
BEGIN
    OPEN p_shop_cursor FOR
        SELECT 
            lz.ID_LISTY,
            lz.DATA_UTWORZENIA,
            lz.NAZWA,
            lz.STATUS,
            (SELECT SUM(lp.ILOSC_PRODUKTU) 
             FROM LISTA_PRODUKTOW lp 
             WHERE lp.ID_LISTY = lz.ID_LISTY) AS LICZBA_PRODUKTOW
        FROM LISTA_ZAKUPOW lz
        WHERE lz.ID_UZYTKOWNIKA = p_userId;
END ReadListyUzytkownika;

/
--------------------------------------------------------
--  DDL for Procedure READLOGINYUZYTKOWNIKOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READLOGINYUZYTKOWNIKOW" (
    p_shop_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_shop_cursor FOR
        SELECT ID_UZYTKOWNIKA, LOGIN
        FROM uzytkownicy;
END ReadLoginyUzytkownikow;

/
--------------------------------------------------------
--  DDL for Procedure READNAZWYLIST
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READNAZWYLIST" (
    p_list_cursor OUT SYS_REFCURSOR,
    p_userId IN NUMBER
) AS
BEGIN
    OPEN p_list_cursor FOR
        SELECT ID_LISTY, NAZWA
        FROM LISTA_ZAKUPOW
        WHERE ID_UZYTKOWNIKA=p_userId;
END ReadNazwyList;

/
--------------------------------------------------------
--  DDL for Procedure READNAZWYSKLEPOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READNAZWYSKLEPOW" (
    p_shop_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_shop_cursor FOR
        SELECT ID_SKLEPU, NAZWA_SKLEPU
        FROM SKLEPY;
END ReadNazwySklepow;

/
--------------------------------------------------------
--  DDL for Procedure READNIEZREALIZOWANELISTY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READNIEZREALIZOWANELISTY" (
    p_shop_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_shop_cursor FOR
        SELECT ID_LISTY, ID_UZYTKOWNIKA,DATA_UTWORZENIA,NAZWA,STATUS  
        FROM LISTA_ZAKUPOW
        WHERE STATUS='Niezrealizowane';
END ReadNiezrealizowaneListy;

/
--------------------------------------------------------
--  DDL for Procedure READPRODUCENCI
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READPRODUCENCI" (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT NAZWA 
        FROM producenci;
END READPRODUCENCI;

/
--------------------------------------------------------
--  DDL for Procedure READPRODUKTY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READPRODUKTY" (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT p.ID_PRODUKTU, p.NAZWA as NazwaProduktu, s.nazwa_sklepu as NazwaSklepu, pp.nazwa as NazwaProducenta, p.cena as Cena
        FROM PRODUKTY p
        JOIN produkty_sklepy ps ON p.id_produktu = ps.id_produktu
        JOIN sklepy s ON ps.id_sklepu=s.id_sklepu
        JOIN producenci pp ON pp.ID_PRODUCENTA=p.ID_PRODUCENTA
        ORDER BY p.ID_PRODUKTU;
END READPRODUKTY;

/
--------------------------------------------------------
--  DDL for Procedure READPRODUKTY_SKLEPY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READPRODUKTY_SKLEPY" (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT  s.nazwa_sklepu as NazwaSklepu,p.NAZWA as NazwaProduktu, pp.nazwa as NazwaProducenta, p.cena as Cena
        FROM PRODUKTY p
        JOIN produkty_sklepy ps ON p.id_produktu = ps.id_produktu
        JOIN sklepy s ON ps.id_sklepu=s.id_sklepu
        JOIN producenci pp ON pp.ID_PRODUCENTA=p.ID_PRODUCENTA
        ORDER BY NazwaSklepu;
END READPRODUKTY_SKLEPY;

/
--------------------------------------------------------
--  DDL for Procedure READSKLEPY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READSKLEPY" (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_SKLEPU, NAZWA_SKLEPU, ADRES
        FROM SKLEPY
        ORDER BY ID_SKLEPU;
END READSKLEPY;

/
--------------------------------------------------------
--  DDL for Procedure READSKLEPY2
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READSKLEPY2" (
    p_id_sklepu IN NUMBER, -- Input parameter for the shop ID
    p_nazwa_sklepu OUT VARCHAR2 -- Output parameter to return the shop name
) AS
    v_nazwa_sklepu SKLEPY.NAZWA_SKLEPU%TYPE; -- Variable to hold the shop name temporarily
BEGIN
    -- Attempt to select the shop name from the SKLEPY table where the ID matches
    SELECT NAZWA_SKLEPU INTO v_nazwa_sklepu
    FROM SKLEPY
    WHERE ID_SKLEPU = p_id_sklepu;

    -- Assign the fetched shop name to the output parameter
    p_nazwa_sklepu := v_nazwa_sklepu;

EXCEPTION
    -- Exception handling for cases where no matching shop is found
    WHEN NO_DATA_FOUND THEN
        p_nazwa_sklepu := 'No shop found with the given ID';
    -- Handle potential exceptions that could be raised during SQL operations
    WHEN OTHERS THEN
        -- You might want to log this error or handle it appropriately in your application
        RAISE_APPLICATION_ERROR(-20001, 'An unexpected error occurred: ' || SQLERRM);
END READSKLEPY2;

/
--------------------------------------------------------
--  DDL for Procedure READUZYTKOWNICY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READUZYTKOWNICY" AS
CURSOR c_uzytkownicy IS SELECT * FROM UZYTKOWNICY;
BEGIN
    FOR uzytkownik IN c_uzytkownicy LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || uzytkownik.ID_UZYTKOWNIKA || ' Dane: ' || uzytkownik.IMIE ||  uzytkownik.NAZWISKO || ' Telfon: ' || uzytkownik.NR_TELEFONU);
    END LOOP;
END;

/
--------------------------------------------------------
--  DDL for Procedure READUZYTKOWNIKOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."READUZYTKOWNIKOW" (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_UZYTKOWNIKA, IMIE, NAZWISKO, NR_TELEFONU, ADRES_EMAIL, LOGIN, HASLO, PIENIADZE, ROLE
        FROM UZYTKOWNICY 
        ORDER BY ID_UZYTKOWNIKA;
END READUZYTKOWNIKOW;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEBRANZE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."UPDATEBRANZE" (idBranzy IN NUMBER, nowaNazwa IN VARCHAR2) AS
BEGIN
    UPDATE BRANZE SET NAZWA = nowaNazwa WHERE ID_BRANZY = idBranzy;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEKATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."UPDATEKATEGORIA" (idKategorii IN NUMBER, nowaNazwa IN VARCHAR2) AS
BEGIN
    UPDATE KATEGORIE SET NAZWA = nowaNazwa WHERE ID_KATEGORII = idKategorii;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATELISTAPRODUKTOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."UPDATELISTAPRODUKTOW" (idProduktu IN NUMBER, nowaIlosc IN NUMBER) AS
BEGIN
    UPDATE LISTA_PRODUKTOW SET ILOSC_PRODUKTU = nowaIlosc WHERE ID_LISTY_PRODUKTOW  = idProduktu;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATELISTAZAKUPOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."UPDATELISTAZAKUPOW" (idZakupu IN NUMBER) AS
BEGIN
    UPDATE LISTA_ZAKUPOW SET STATUS = 'Zrealizowane' WHERE ID_LISTY = idZakupu;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEPRODUCENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."UPDATEPRODUCENT" (idProducenta IN NUMBER, nowaNazwa IN VARCHAR2, nowyAdres IN VARCHAR2) AS
BEGIN
    UPDATE PRODUCENCI SET NAZWA = nowaNazwa,ADRES=nowyAdres WHERE ID_PRODUCENTA = idProducenta;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEPRODUKT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."UPDATEPRODUKT" ( 
    idProduktu IN NUMBER, 
    idKategorii IN NUMBER,
    p_id_producenta IN NUMBER, 
    nowaNazwa IN VARCHAR2, 
    nowaCena IN FLOAT   
) AS
BEGIN
    UPDATE PRODUKTY SET id_kategorii=idkategorii, ID_PRODUCENTA=p_id_producenta , NAZWA = nowaNazwa, CENA=nowaCena 
    WHERE ID_PRODUKTU = idProduktu;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEPRODUKTSKLEP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."UPDATEPRODUKTSKLEP" (idProduktu IN NUMBER, idSklepu IN NUMBER, nowaIloscProduktu IN NUMBER) AS
BEGIN
    UPDATE PRODUKTY_SKLEPY SET ILOSC = nowaIloscProduktu WHERE ID_PRODUKTU = idProduktu AND ID_SKLEPU = idSklepu;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATESKLEP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."UPDATESKLEP" (
    p_ID_SKLEPU IN NUMBER,
    p_ADRES IN VARCHAR2
) AS
BEGIN
    UPDATE SKLEPY SET ADRES = p_ADRES
        WHERE ID_SKLEPU = p_ID_SKLEPU;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEUZYTKOWNIK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."UPDATEUZYTKOWNIK" (
    p_ID_UZYTKOWNIKA IN NUMBER,
    p_NR_TELEFONU IN VARCHAR2,
    p_ADRES_EMAIL IN VARCHAR2,
    p_HASLO IN VARCHAR2,
    p_ROLA IN VARCHAR2  
) AS
BEGIN
    UPDATE UZYTKOWNICY SET NR_TELEFONU = p_NR_TELEFONU, ADRES_EMAIL = p_ADRES_EMAIL, HASLO = p_HASLO, ROLE = p_ROLA
        WHERE ID_UZYTKOWNIKA = p_ID_UZYTKOWNIKA;
   
END;

/
--------------------------------------------------------
--  DDL for Procedure USUNLISTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."USUNLISTE" (id_list NUMBER) AS 
BEGIN

    DELETE FROM LISTA_PRODUKTOW WHERE id_listy = id_list;
    DELETE FROM LISTA_ZAKUPOW WHERE id_listy = id_list;

END USUNLISTE;

/
--------------------------------------------------------
--  DDL for Procedure USUNPRODUKT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR"."USUNPRODUKT" (id_prod NUMBER, id_list NUMBER) AS 
BEGIN

  DELETE FROM LISTA_PRODUKTOW WHERE id_listy = id_list AND id_produktu = id_prod;

END USUNPRODUKT;

/
--------------------------------------------------------
--  DDL for Function CENALISTY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."CENALISTY" (id_listy_zak NUMBER) RETURN FLOAT
AS
	suma FLOAT;
BEGIN 

    SELECT SUM(p.cena * n.ilosc_produktu)INTO suma FROM PRODUKTY p,  LISTA_PRODUKTOW n WHERE p.id_produktu = n.id_produktu AND ID_LISTY =id_listy_zak;
    return suma;
END;

/
--------------------------------------------------------
--  DDL for Function FINDBRANZABYNAME
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."FINDBRANZABYNAME" (zmienna VARCHAR2) RETURN INTEGER AS
idBranzy INTEGER;
BEGIN
    SELECT id_branzy INTO idBranzy FROM branze WHERE nazwa = zmienna;
    RETURN idBranzy;
END;


/
--------------------------------------------------------
--  DDL for Function FINDKATEGORIABYNAME
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."FINDKATEGORIABYNAME" (zmienna VARCHAR2) RETURN INTEGER AS
idKategorii INTEGER;
BEGIN
    SELECT id_kategorii INTO idKategorii FROM kategorie WHERE nazwa = zmienna;
    RETURN idKategorii;
END;

/
--------------------------------------------------------
--  DDL for Function FINDLISTAPBYNAME
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."FINDLISTAPBYNAME" (zmienna VARCHAR2) RETURN INTEGER AS
idListy INTEGER;
BEGIN
    SELECT id_listy INTO idListy FROM lista_zakupow WHERE NAZWA = zmienna;
    RETURN idListy;
END;

/
--------------------------------------------------------
--  DDL for Function FINDLOGINBYID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."FINDLOGINBYID" (userID INTEGER) 
RETURN VARCHAR2 AS 
    userLogin VARCHAR2(255);  -- Use VARCHAR2 to match the LOGIN type
BEGIN
    SELECT LOGIN INTO userLogin 
    FROM uzytkownicy 
    WHERE ID_UZYTKOWNIKA = userID;
    RETURN userLogin;
END;

/
--------------------------------------------------------
--  DDL for Function FINDPRODUCENTBYNAME
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."FINDPRODUCENTBYNAME" (zmienna VARCHAR2) RETURN INTEGER AS
idProducenta INTEGER;
BEGIN
    SELECT id_producenta INTO idProducenta FROM producenci WHERE nazwa = zmienna;
    RETURN idProducenta;
END;


/
--------------------------------------------------------
--  DDL for Function FINDPRODUCTBYNAME
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."FINDPRODUCTBYNAME" (zmienna VARCHAR2) RETURN INTEGER AS
idProduktu INTEGER;
BEGIN
    SELECT id_produktu INTO idProduktu FROM produkty WHERE nazwa = zmienna;
    RETURN idProduktu;
END;

/
--------------------------------------------------------
--  DDL for Function FINDSKLEPBYNAME
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."FINDSKLEPBYNAME" (zmienna VARCHAR2) RETURN INTEGER AS
idSklepu INTEGER;
BEGIN
    SELECT id_sklepu INTO idSklepu FROM sklepy WHERE nazwa_sklepu = zmienna;
    RETURN idSklepu;
END;

/
--------------------------------------------------------
--  DDL for Function FINDUZYTKOWNIKABYLOGIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."FINDUZYTKOWNIKABYLOGIN" (zmienna VARCHAR2) RETURN INTEGER AS
userID INTEGER;
BEGIN
    SELECT ID_UZYTKOWNIKA INTO userID FROM uzytkownicy WHERE LOGIN = zmienna;
    RETURN userID;
END;

/
--------------------------------------------------------
--  DDL for Function LICZBALISTZAKUPOW
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."LICZBALISTZAKUPOW" (zmienna VARCHAR2) RETURN INTEGER AS
    liczbaList INTEGER;
    BEGIN
        SELECT COUNT(l.id_listy) INTO liczbaList FROM uzytkownicy u, lista_zakupow l WHERE u.id_uzytkownika = l.id_uzytkownika AND u.id_uzytkownika = zmienna;
    
        RETURN liczbaList;
    END;

/
--------------------------------------------------------
--  DDL for Function LICZBAPRZEDMIOTOWWLISTACH
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."LICZBAPRZEDMIOTOWWLISTACH" (zmienna VARCHAR2) RETURN INTEGER AS
liczbaProd INTEGER;
BEGIN
    SELECT SUM(lp.ilosc_produktu) INTO liczbaProd FROM lista_produktow lp, lista_zakupow lz, uzytkownicy u WHERE u.id_uzytkownika = zmienna AND u.id_uzytkownika = lz.id_uzytkownika AND lp.id_listy = lz.id_listy;    

    RETURN liczbaProd;
END;

/
--------------------------------------------------------
--  DDL for Function POBIERZILOSCPRODUKTU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."POBIERZILOSCPRODUKTU" (id_prod NUMBER, id_listy_zak NUMBER) RETURN NUMBER AS

    ilosc NUMBER;

BEGIN

    SELECT ILOSC_PRODUKTU INTO ilosc FROM LISTA_PRODUKTOW WHERE id_produktu=id_prod AND id_listy = id_listy_zak;

    RETURN ilosc;
END POBIERZILOSCPRODUKTU;

/
--------------------------------------------------------
--  DDL for Function POBIERZILOSCWSKLEPIE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."POBIERZILOSCWSKLEPIE" (id_prod NUMBER, id_skl NUMBER) RETURN NUMBER AS 

    ilosc NUMBER;
BEGIN

    SELECT ilosc INTO ilosc FROM PRODUKTY_SKLEPY WHERE id_produktu = id_prod AND id_sklepu = id_skl ;
    RETURN ilosc;

END POBIERZILOSCWSKLEPIE;

/
--------------------------------------------------------
--  DDL for Function POBIERZNAZWELISTY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."POBIERZNAZWELISTY" (p_id_listy IN NUMBER) RETURN VARCHAR2 AS
    nazwaListy VARCHAR2(30);
BEGIN
    SELECT lz.nazwa INTO nazwaListy 
    FROM lista_zakupow lz 
    WHERE lz.id_listy  = p_id_listy;
    RETURN nazwaListy;
END;

/
--------------------------------------------------------
--  DDL for Function POBIERZNAZWEPRODUKTU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."POBIERZNAZWEPRODUKTU" (p_id_produktu IN VARCHAR2) RETURN VARCHAR2 AS
    nazwa VARCHAR2(30);
BEGIN
    SELECT p.nazwa INTO nazwa 
    FROM produkty p 
    WHERE p.id_produktu = p_id_produktu;
    RETURN nazwa;
END;

/
--------------------------------------------------------
--  DDL for Function POBIERZNAZWESKLEPU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."POBIERZNAZWESKLEPU" (p_id_sklepu IN NUMBER) RETURN VARCHAR2 AS
    nazwaSklepu VARCHAR2(30);
BEGIN
    SELECT s.NAZWA_SKLEPU INTO nazwaSklepu 
    FROM sklepy s 
    WHERE s.id_sklepu  = p_id_sklepu;
    RETURN nazwaSklepu;
END;

/
--------------------------------------------------------
--  DDL for Function POBIERZPRODUKTYWSKLEPIE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."POBIERZPRODUKTYWSKLEPIE" (
    p_id_sklepu IN NUMBER
) RETURN VARCHAR2 AS
    nazwa VARCHAR2(30);
BEGIN
    -- Assuming you want to return the name of the product where both product ID and shop ID match
    SELECT p.nazwa INTO nazwa
    FROM produkty p
    JOIN produkty_sklepy ps ON p.id_produktu = ps.id_produktu -- Fixed the join clause
    WHERE ps.id_sklepu = p_id_sklepu;

    RETURN nazwa;
END;

/
--------------------------------------------------------
--  DDL for Function POBIERZROLE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."POBIERZROLE" (p_id_uzytkownika IN VARCHAR2) RETURN VARCHAR2 AS
    rola VARCHAR2(30);
BEGIN
    SELECT u.role INTO rola 
    FROM uzytkownicy u 
    WHERE u.id_uzytkownika  = p_id_uzytkownika;
    RETURN rola;
END;

/
--------------------------------------------------------
--  DDL for Function POBIERZSTATUS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."POBIERZSTATUS" (p_id_listy IN NUMBER) RETURN VARCHAR2 AS
    status VARCHAR2(30);
BEGIN
    SELECT lz.status INTO status 
    FROM lista_zakupow lz 
    WHERE lz.id_listy  = p_id_listy;
    RETURN status;
END;

/
--------------------------------------------------------
--  DDL for Function POBIERZSTATUSLISTY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."POBIERZSTATUSLISTY" (id_listy_zak NUMBER) RETURN VARCHAR2 AS

    statusListy varchar2(30);
BEGIN

    SELECT l.status into statusListy FROM lista_zakupow l WHERE l.id_listy = id_listy_zak;
    RETURN statusListy;

END;


/
--------------------------------------------------------
--  DDL for Function READILOSCWSKLEPACH
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HR"."READILOSCWSKLEPACH" (
    p_id_sklepu IN NUMBER,
    p_id_przedmiotu IN NUMBER
) RETURN VARCHAR2 AS
    ilosc VARCHAR2(30);
BEGIN
    -- Assuming you want to return the name of the product where both product ID and shop ID match
    SELECT ilosc into ilosc
    FROM produkty_sklepy
    WHERE p_id_sklepu=id_sklepu
    AND p_id_przedmiotu=id_produktu;

    RETURN ilosc;
END;

/
--------------------------------------------------------
--  Constraints for Table BRANZE
--------------------------------------------------------

  ALTER TABLE "HR"."BRANZE" ADD CONSTRAINT "PK_BRANZE" PRIMARY KEY ("ID_BRANZY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table KATEGORIE
--------------------------------------------------------

  ALTER TABLE "HR"."KATEGORIE" ADD CONSTRAINT "PK_KATEGORIE" PRIMARY KEY ("ID_KATEGORII")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LISTA_PRODUKTOW
--------------------------------------------------------

  ALTER TABLE "HR"."LISTA_PRODUKTOW" ADD CONSTRAINT "PK_LISTA_PRODUKTOW" PRIMARY KEY ("ID_LISTY_PRODUKTOW")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LISTA_ZAKUPOW
--------------------------------------------------------

  ALTER TABLE "HR"."LISTA_ZAKUPOW" ADD CONSTRAINT "PK_LISTA_ZAKUPOW" PRIMARY KEY ("ID_LISTY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUCENCI
--------------------------------------------------------

  ALTER TABLE "HR"."PRODUCENCI" ADD CONSTRAINT "PK_PRODUCENCI" PRIMARY KEY ("ID_PRODUCENTA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUKTY
--------------------------------------------------------

  ALTER TABLE "HR"."PRODUKTY" ADD CONSTRAINT "PK_PRODUKTY" PRIMARY KEY ("ID_PRODUKTU")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SKLEPY
--------------------------------------------------------

  ALTER TABLE "HR"."SKLEPY" ADD CONSTRAINT "PK_PRODUKTY_SKLEPY" PRIMARY KEY ("ID_SKLEPU")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table UZYTKOWNICY
--------------------------------------------------------

  ALTER TABLE "HR"."UZYTKOWNICY" ADD CONSTRAINT "PK_UZYTKOWNICY" PRIMARY KEY ("ID_UZYTKOWNIKA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "HR"."UZYTKOWNICY" ADD CONSTRAINT "UNQ_LOGIN" UNIQUE ("LOGIN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "HR"."UZYTKOWNICY" ADD CONSTRAINT "UNQ_EMAIL" UNIQUE ("ADRES_EMAIL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LISTA_PRODUKTOW
--------------------------------------------------------

  ALTER TABLE "HR"."LISTA_PRODUKTOW" ADD CONSTRAINT "FK_LISTA_PRODUKTOW_LISTA_ZAKUPOW" FOREIGN KEY ("ID_LISTY")
	  REFERENCES "HR"."LISTA_ZAKUPOW" ("ID_LISTY") ENABLE;
  ALTER TABLE "HR"."LISTA_PRODUKTOW" ADD CONSTRAINT "FK_LISTA_PRODUKTOW_PRODUKTY" FOREIGN KEY ("ID_PRODUKTU")
	  REFERENCES "HR"."PRODUKTY" ("ID_PRODUKTU") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LISTA_ZAKUPOW
--------------------------------------------------------

  ALTER TABLE "HR"."LISTA_ZAKUPOW" ADD CONSTRAINT "FK_LISTA_ZAKUPOW_UZYTKOWNICY" FOREIGN KEY ("ID_UZYTKOWNIKA")
	  REFERENCES "HR"."UZYTKOWNICY" ("ID_UZYTKOWNIKA") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCENCI
--------------------------------------------------------

  ALTER TABLE "HR"."PRODUCENCI" ADD CONSTRAINT "FK_PRODUCENCI_BRANZE" FOREIGN KEY ("ID_BRANZY")
	  REFERENCES "HR"."BRANZE" ("ID_BRANZY") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUKTY
--------------------------------------------------------

  ALTER TABLE "HR"."PRODUKTY" ADD CONSTRAINT "FK_PRODUKTY_KATEGORIE" FOREIGN KEY ("ID_KATEGORII")
	  REFERENCES "HR"."KATEGORIE" ("ID_KATEGORII") ENABLE;
  ALTER TABLE "HR"."PRODUKTY" ADD CONSTRAINT "FK_PRODUKTY_PRODUCENCI" FOREIGN KEY ("ID_PRODUCENTA")
	  REFERENCES "HR"."PRODUCENCI" ("ID_PRODUCENTA") ENABLE;
